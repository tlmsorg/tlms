<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
	default-lazy-init="true">


    <context:annotation-config />
    
    
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<!-- <context:component-scan base-package="me.kafeitu.activiti">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan> -->
	 <!-- 自动扫描 -->  
    <!-- <context:component-scan base-package="me.kafeitu.activiti" />   -->
     <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>
	<!-- 加载property文件 -->
	<context:property-placeholder location="classpath:property.properties"/>
	 
  <!-- 数据源 -->
  <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />  
        <property name="url" value="jdbc:oracle:thin:@192.168.137.6:1521:orcl" />  
        <property name="username" value="activiti" />  
        <property name="password" value="activiti" />  
        初始化连接大小  
        <property name="initialSize" value="${initialSize}"></property>  
        连接池最大数量  
        <property name="maxActive" value="${maxActive}"></property>  
        连接池最大空闲  
        <property name="maxIdle" value="${maxIdle}"></property>  
        连接池最小空闲  
        <property name="minIdle" value="${minIdle}"></property>  
        获取连接最大等待时间  
        <property name="maxWait" value="${maxWait}"></property>  
    </bean>  -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"
		p:driverClassName="${driver}"
		p:url="${url}"
		p:username="${username}"
		p:password="${password}"/>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/sys/mapping/*.xml"></property> 
    </bean>  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.tang.mybatis.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean> 
    
 <!-- activiti 配置开始 -->
    <!-- 流程引擎实例 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
    	<property name="processEngineConfiguration" ref="processEngineConfiguration" />
  	</bean>
    <!-- activiti 流程引擎配置
    databaseSchemaUpdate属性的取值： 
    flase： 默认值。activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常。
true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建。
create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）。
drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）。-->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
    	<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="false" />
		<!-- <property name="databaseSchema" value="ACT"/> -->
		<!-- 解决流程图乱码问题 -->
		<property name="activityFontName" value="宋体"/>
		<property name="labelFontName" value="宋体"/>
    </bean>
    <!-- activiti的各种服务接口 -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <!-- activiti 配置结束 --> 
    
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource"/>
 
</beans>